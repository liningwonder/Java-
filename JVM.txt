第一章
第1节
1.1 关于java
1.1.1 Java技术体系
（1）Java程序设计yuyan
（2）Java虚拟机：JVM
（3）Java API类库
（4）Java第三方类库
JDK = Java程序设计语言 + JVM + Java API类库 （开发最小环境）
JRE = Java SE API子集（核心类库） + JVM （运行最小环境）

1.1.2 Java技术的发展
（1）主要是新特性的增加支持
Java 8
Java 9
Java 10
（2）虚拟机技术的发展：HotSpot
编译器 JIT 即时编译器
解释器
内存回收GC
（3）OpenJDK与Oracle JDK

第2节
1.2 JVM内部结构
1.2.1 JVM小知识
1.2.1.1 JDK命令行工具
最基本的是java javac
（1）jps：列出正在运行的虚拟机进程，显示进程虚拟机的ID（LVMID）以及虚拟机执行的主类。其中本地虚拟机标识符LVMID是监控虚拟机的基础。
 使用说明：jps -l
 jps -v 查看显示指定的启动参数
 注：jps也可以通过RMI协议查询远程虚拟机进程状态。
（2）jstat：监视虚拟机的各种运行状态信息（类加载、内存、垃圾收集等），常用于内存监控、线程监控
使用说明：jstat -gc LVMID interval times
-gc -class -compiler -gcutil
LVMID 代表虚拟机进程ID
interval 表示每个多少毫秒查询一次
times 表示总共查询多少次

新生代 Eden区
老年代 O
永久带 P
YGC 表示Young GC
FGC 表示Full GC
（3）jinfo：实时查看和调整虚拟机的各项参数
使用说明：jinfo -flag 要查询的参数 pid（进程号）
（4）jmap：生成堆转储快照即dump文件，通常在OOM时使用
使用说明：jmap -dump LVMID
同时使用jhat可以用来分析dump文件
（5）jstack：java堆栈跟踪工具，用于生成当前时刻的线程快照即javacore文件
使用说明：jstack -l LVMID

1.2.1.2 JDK可视化工具
JMX：
（1）JConsole
（2）VisualVM

1.2.2 JVM运行时数据区（Java 7）

实际的机器数据访问：CPU（运算器、控制器、寄存器）寄存器-缓存（高速缓冲存储器）-内存-外存

（1）程序计数器（线程私有）
相当于当前线程所执行的字节码的行号指示器
（2）虚拟机栈（线程私有 Stack）
生命周期与线程相同，是Java方法执行的内存模型，每个方法执行时都会创建一个栈帧
（3）本地方法栈（线程私有），HotSpot虚拟机把这一部分合到虚拟机栈中执行本地方法时的栈
（4）堆（线程共享Heap）
用于存放对象实例，几乎所有对象都在这里分配内存。GC回收管理的主要区域
（5）方法区（线程共享，又称非堆No-Heap）：
存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码calss文件
Classloader 引用
运行时常量池
字段数据
方法数据
方法代码
（6）运行时常量池
属于方法区的一部分，类的描述信息，字面量，符号引用
字节码包含这个常量池的引用
常量池中可以存储多种类型的数据：
数字型
字符串型
类引用型
域引用型
方法引用
1.2.3 对象的创建
编译后的字节码文件会包含对象的引用
1.2.3.1 new 
（1）类加载检查：程序首先去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查这个符号引用代表的类
是否已被加载、解析和初始化过，如果没有，那先执行相应的类加载过程
（2）类加载检查完成后，虚拟机将为新生对象分配内存，内存大小在类加载完成时确定。Java堆中
（3）虚拟机设置对象。添加对象头
（4）执行初始化
1.2.3.2 常见
String是放在常量池中
（1）
原始类型：
（2）
引用类型：对象总是在堆中，对象总是存储在堆上以便在方法结束时不会被移除。对象只能由垃圾回收器移除。
不能在栈上存储数组和对象，栈帧只存储指向堆中对象或数组的引用。
